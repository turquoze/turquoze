generator client {
  provider        = "prisma-client-js"
  output          = "../generated/client"
  previewFeatures = ["deno"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cartitems {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  cart_id    String    @db.Uuid
  product_id String    @db.Uuid
  quantity   Int       @default(1)
  price      Int
  carts      carts     @relation(fields: [cart_id], references: [public_id], onDelete: Cascade, onUpdate: NoAction)
  products   products  @relation(fields: [product_id], references: [public_id], onDelete: NoAction, onUpdate: NoAction)
}

model carts {
  public_id  String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime?   @default(now()) @db.Timestamptz(6)
  id         BigInt      @default(autoincrement())
  metadata   Json?       @db.Json
  shipping   Json?       @db.Json
  billing    Json?       @db.Json
  coupon     String?     @db.VarChar
  giftcard   String?     @db.VarChar
  comment    String?     @db.VarChar
  cartitems  cartitems[]
}

model categories {
  public_id        String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at       DateTime?        @default(now()) @db.Timestamptz(6)
  name             String           @unique
  parent           String?          @db.Uuid
  shop             String?          @db.Uuid
  id               BigInt           @default(autoincrement())
  categories       categories?      @relation("categoriesTocategories", fields: [parent], references: [public_id], onDelete: NoAction, onUpdate: NoAction)
  shops            shops?           @relation(fields: [shop], references: [public_id], onDelete: NoAction, onUpdate: NoAction)
  other_categories categories[]     @relation("categoriesTocategories")
  categorieslink   categorieslink[]
}

model categorieslink {
  category   String     @db.Uuid
  product    String     @db.Uuid
  categories categories @relation(fields: [category], references: [public_id], onDelete: NoAction, onUpdate: NoAction, map: "categoriesLink_category_fkey")
  products   products   @relation(fields: [product], references: [public_id], onDelete: NoAction, onUpdate: NoAction, map: "categoriesLink_product_fkey")

  @@id([category, product], map: "categoriesLink_pkey")
}

model discounts {
  public_id  String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  type       String
  value      Int
  valid_to   DateTime? @db.Timestamp(6)
  valid_from DateTime? @db.Timestamp(6)
  shop       String    @db.Uuid
  code       String    @unique
  id         BigInt    @default(autoincrement())
  shops      shops     @relation(fields: [shop], references: [public_id], onDelete: NoAction, onUpdate: NoAction)
}

model inventories {
  public_id  String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime?  @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(6)
  warehouse  String     @db.Uuid
  product    String     @db.Uuid
  quantity   Int        @default(0)
  id         BigInt     @default(autoincrement())
  products   products   @relation(fields: [product], references: [public_id], onDelete: NoAction, onUpdate: NoAction)
  warehouses warehouses @relation(fields: [warehouse], references: [public_id], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  public_id      String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  payment_status String    @default("WAITING")
  products       Json?     @db.Json
  shop           String    @db.Uuid
  id             BigInt    @default(autoincrement())
  price_total    Int?
  shops          shops     @relation(fields: [shop], references: [public_id], onDelete: NoAction, onUpdate: NoAction)
}

model prices {
  public_id  String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  amount     Int       @default(0)
  shop       String?   @db.Uuid
  product    String    @db.Uuid
  id         BigInt    @default(autoincrement())
  products   products  @relation(fields: [product], references: [public_id], onDelete: NoAction, onUpdate: NoAction)
  shops      shops?    @relation(fields: [shop], references: [public_id], onDelete: NoAction, onUpdate: NoAction)
}

model products {
  public_id         String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at        DateTime         @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(6)
  active            Boolean          @default(false)
  parent            String?          @db.Uuid
  title             String
  short_description String
  images            String[]
  price             Decimal          @db.Decimal
  shop              String           @db.Uuid
  long_description  String?          @db.VarChar
  id                BigInt           @default(autoincrement())
  slug              String           @unique @default("") @db.VarChar
  products          products?        @relation("productsToproducts", fields: [parent], references: [public_id], onDelete: NoAction, onUpdate: NoAction)
  shops             shops            @relation(fields: [shop], references: [public_id], onDelete: NoAction, onUpdate: NoAction)
  cartitems         cartitems[]
  categorieslink    categorieslink[]
  inventories       inventories[]
  prices            prices[]
  other_products    products[]       @relation("productsToproducts")
  taxeslink         taxeslink[]
}

model shops {
  public_id    String       @id(map: "regions_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at   DateTime?    @default(now()) @db.Timestamptz(6)
  regions      String[]
  currency     String?
  name         String?
  id           BigInt       @default(autoincrement())
  payment_id   String?      @db.VarChar
  url          String?      @db.VarChar
  search_index String?      @db.VarChar
  secret       String       @default("test")
  settings     Json?        @db.Json
  categories   categories[]
  discounts    discounts[]
  orders       orders[]
  prices       prices[]
  products     products[]
  taxes        taxes[]
  tokens       tokens[]
  users        users[]
}

model taxes {
  id         BigInt      @default(autoincrement())
  created_at DateTime?   @default(now()) @db.Timestamptz(6)
  public_id  String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type       String      @default("Inclusive") @db.VarChar
  name       String      @db.VarChar
  value      Decimal     @db.Decimal
  shop       String      @db.Uuid
  shops      shops       @relation(fields: [shop], references: [public_id], onDelete: NoAction, onUpdate: NoAction)
  taxeslink  taxeslink[]
}

model taxeslink {
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  product_id String    @db.Uuid
  country    String    @db.VarChar
  id         Decimal   @id @db.Decimal
  tax_id     String    @db.Uuid
  products   products  @relation(fields: [product_id], references: [public_id], onDelete: NoAction, onUpdate: NoAction)
  taxes      taxes     @relation(fields: [tax_id], references: [public_id], onDelete: NoAction, onUpdate: NoAction)
}

model tokens {
  id         String    @id(map: "tokens_new_pkey") @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  shop       String    @db.Uuid
  name       String    @db.VarChar
  secret     String    @db.VarChar
  role       String    @default("USER") @db.VarChar
  shops      shops     @relation(fields: [shop], references: [public_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id         BigInt    @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  public_id  String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String?
  email      String
  not_active Boolean   @default(false)
  shop       String?   @db.Uuid
  password   String    @db.VarChar
  role       String?   @db.VarChar
  shops      shops?    @relation(fields: [shop], references: [public_id], onDelete: NoAction, onUpdate: NoAction)
}

model warehouses {
  public_id   String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at  DateTime?     @default(now()) @db.Timestamptz(6)
  country     String
  address     String
  name        String
  shop        String        @db.Uuid
  id          BigInt        @default(autoincrement())
  inventories inventories[]
}
